
Number of operands: 3
1 0
2 1
3 2
Number of operands: 3
4 3
5 0
6 5
largest id in old graph: 5 
found digraph
testing line
node inserted!
testing line
node inserted!
testing line
node inserted!
testing line
node inserted!
testing line
node inserted!
read graph with 5 nodes
5 nodes found
roots found
parents: {3}
Nodes added: [3, 0, 5, 1, 2]
the extracted expressions are the following: 
(linalg.matmul (linalg.matmul (matrix 3 2 1 1) (matrix 2 4 2 2) 0 0) (matrix 4 3 5 5) 3 3)
original expression: (linalg.matmul (linalg.matmul (matrix 3 2 1 1) (matrix 2 4 2 2) 0 0) (matrix 4 3 5 5) 3 3) with cost: 66
best expression: (linalg.matmul (matrix 3 2 1 1) (linalg.matmul (matrix 2 4 2 2) (matrix 4 3 5 5) -1 -1) -1 3) with cost: 48
the best expressions are: 
(linalg.matmul (matrix 3 2 1 1) (linalg.matmul (matrix 2 4 2 2) (matrix 4 3 5 5) -1 -1) -1 3)
pretty: (linalg.matmul (matrix 3 2 1 1) (linalg.matmul (matrix 2 4 2 2) (matrix 4 3 5 5) -1 -1) -1 3)
considering (linalg.matmul (matrix 3 2 1 1) (linalg.matmul (matrix 2 4 2 2) (matrix 4 3 5 5) -1 -1) -1 3)
found a match!
 The arg is: (matrix 3 2 1 1)
No element with the same string value in the VecDeque.
 The arg is: (linalg.matmul (matrix 2 4 2 2) (matrix 4 3 5 5) -1 -1)
No element with the same string value in the VecDeque.
 The arg is: -1
 The arg is: 3
considering (matrix 3 2 1 1)
found a match!
considering (linalg.matmul (matrix 2 4 2 2) (matrix 4 3 5 5) -1 -1)
found a match!
 The arg is: (matrix 2 4 2 2)
No element with the same string value in the VecDeque.
 The arg is: (matrix 4 3 5 5)
No element with the same string value in the VecDeque.
 The arg is: -1
 The arg is: -1
considering (matrix 2 4 2 2)
found a match!
considering (matrix 4 3 5 5)
found a match!
Found node with data: linalg.matmul and dims 0x0 with old_id -1.
New old_id value: 6
Found node with data: linalg.matmul and dims 0x0 with old_id -1.
New old_id value: 7
id: 0 with rows: NA and columns: NA
id: 1 with rows: 3 and columns: 2
id: 2 with rows: NA and columns: NA
id: 3 with rows: 2 and columns: 4
id: 4 with rows: 4 and columns: 3

id: 0, data: linalg.matmul, rows: NA, columns: NA, old ID: 6, old op ID: 3
It's NA 
id: 1, data: 3x2 matrix, rows: 3, columns: 2, old ID: 1, old op ID: 1
It's a matrix with 3 rows and 2 columns 
id: 2, data: linalg.matmul, rows: NA, columns: NA, old ID: 7, old op ID: 7
It's NA 
id: 3, data: 2x4 matrix, rows: 2, columns: 4, old ID: 2, old op ID: 2
It's a matrix with 2 rows and 4 columns 
id: 4, data: 4x3 matrix, rows: 4, columns: 3, old ID: 5, old op ID: 5
It's a matrix with 4 rows and 3 columns 
from: 0, to: 1
from: 0, to: 2
from: 2, to: 3
from: 2, to: 4
constructed the graph! 
id 0 with type 3 4 
id 1 with type 3 2 
id 2 with type 2 4 
id 3 with type 3 3 
id 5 with type 4 3 
writing matmul op... 
result shape... 2  3
in loop matmul op: 
old id 7 with type 2 and 3
old child1 id 2 with type 2 and 4
old child2 id 5 with type 4 and 3
in loop op where old op id and old id are different old id: 6 old op id: 3 and data: linalg.matmul 
Checking other cases... 
writing matmul op... 
result shape... 3  3
in loop matmul op: 
old id 6 with type 3 and 3
old child1 id 1 with type 3 and 2
old child2 id 7 with type 2 and 3
module {
  %0 = tensor.empty() : tensor<3x2xf32>
  %1 = tensor.empty() : tensor<2x4xf32>
  %2 = tensor.empty() : tensor<3x4xf32>
  %3 = linalg.matmul ins(%0, %1 : tensor<3x2xf32>, tensor<2x4xf32>) outs(%2 : tensor<3x4xf32>) -> tensor<3x4xf32>
  %4 = tensor.empty() : tensor<4x3xf32>
  %5 = tensor.empty() : tensor<3x3xf32>
  %6 = tensor.empty() : tensor<2x3xf32>
  %7 = linalg.matmul ins(%1, %4 : tensor<2x4xf32>, tensor<4x3xf32>) outs(%6 : tensor<2x3xf32>) -> tensor<2x3xf32>
  %8 = tensor.empty() : tensor<3x3xf32>
  %9 = linalg.matmul ins(%0, %7 : tensor<3x2xf32>, tensor<2x3xf32>) outs(%8 : tensor<3x3xf32>) -> tensor<3x3xf32>
  %10 = linalg.matmul ins(%3, %4 : tensor<3x4xf32>, tensor<4x3xf32>) outs(%5 : tensor<3x3xf32>) -> tensor<3x3xf32>
}

